resourceMetrics:
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: default
        - key: k8s.namespace.uid
          value:
            stringValue: 9a4f5261-88a7-43b3-9b66-d5b901e9cdbc
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The current phase of namespaces (1 for active and 0 for terminating)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.namespace.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.namespace.uid
          value:
            stringValue: f8095dc5-bf91-4a68-a2bb-b86d27ed6fef
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The current phase of namespaces (1 for active and 0 for terminating)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.namespace.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-node-lease
        - key: k8s.namespace.uid
          value:
            stringValue: ac9592c0-123a-41a2-9f90-9c087c80afce
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The current phase of namespaces (1 for active and 0 for terminating)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.namespace.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-public
        - key: k8s.namespace.uid
          value:
            stringValue: 94f93940-f164-41e7-b851-1fab38c83a1e
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The current phase of namespaces (1 for active and 0 for terminating)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.namespace.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.namespace.uid
          value:
            stringValue: 2ae9924e-5b3d-4bef-a6f7-c7b1dc753143
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The current phase of namespaces (1 for active and 0 for terminating)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.namespace.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: local-path-storage
        - key: k8s.namespace.uid
          value:
            stringValue: 26dff35c-290d-4209-a5d6-f9cea3146943
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The current phase of namespaces (1 for active and 0 for terminating)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.namespace.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.node.uid
          value:
            stringValue: 037dc7b1-d0da-4be9-aede-d9f919c34d02
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The condition of a particular Node.
            gauge:
              dataPoints:
                - asInt: "0"
                  attributes:
                    - key: condition
                      value:
                        stringValue: DiskPressure
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
                - asInt: "0"
                  attributes:
                    - key: condition
                      value:
                        stringValue: MemoryPressure
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
                - asInt: "0"
                  attributes:
                    - key: condition
                      value:
                        stringValue: PIDPressure
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
                - asInt: "1"
                  attributes:
                    - key: condition
                      value:
                        stringValue: Ready
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.node.condition
            unit: '{condition}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.node.uid
          value:
            stringValue: 037dc7b1-d0da-4be9-aede-d9f919c34d02
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Ready condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "1"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_ready
          - description: MemoryPressure condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "0"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_memory_pressure
          - description: PIDPressure condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "0"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_pid_pressure
          - description: DiskPressure condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "0"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_disk_pressure
          - description: NetworkUnavailable condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "-1"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_network_unavailable
          - description: Amount of cpu allocatable on the node
            gauge:
              dataPoints:
                - asDouble: 6
                  timeUnixNano: "1000000"
            name: k8s.node.allocatable_cpu
            unit: '{cpu}'
          - description: Amount of memory allocatable on the node
            gauge:
              dataPoints:
                - asInt: "12508241920"
                  timeUnixNano: "1000000"
            name: k8s.node.allocatable_memory
            unit: By
          - description: Amount of pods allocatable on the node
            gauge:
              dataPoints:
                - asInt: "110"
                  timeUnixNano: "1000000"
            name: k8s.node.allocatable_pods
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.node.name
          value:
            stringValue: kind-worker
        - key: k8s.node.uid
          value:
            stringValue: 9fc75812-881e-44cd-bea5-84d135c2d67e
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The condition of a particular Node.
            gauge:
              dataPoints:
                - asInt: "0"
                  attributes:
                    - key: condition
                      value:
                        stringValue: DiskPressure
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
                - asInt: "0"
                  attributes:
                    - key: condition
                      value:
                        stringValue: MemoryPressure
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
                - asInt: "0"
                  attributes:
                    - key: condition
                      value:
                        stringValue: PIDPressure
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
                - asInt: "1"
                  attributes:
                    - key: condition
                      value:
                        stringValue: Ready
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.node.condition
            unit: '{condition}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.node.name
          value:
            stringValue: kind-worker
        - key: k8s.node.uid
          value:
            stringValue: 9fc75812-881e-44cd-bea5-84d135c2d67e
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Ready condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "1"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_ready
          - description: MemoryPressure condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "0"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_memory_pressure
          - description: PIDPressure condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "0"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_pid_pressure
          - description: DiskPressure condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "0"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_disk_pressure
          - description: NetworkUnavailable condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "-1"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_network_unavailable
          - description: Amount of cpu allocatable on the node
            gauge:
              dataPoints:
                - asDouble: 6
                  timeUnixNano: "1000000"
            name: k8s.node.allocatable_cpu
            unit: '{cpu}'
          - description: Amount of memory allocatable on the node
            gauge:
              dataPoints:
                - asInt: "12508241920"
                  timeUnixNano: "1000000"
            name: k8s.node.allocatable_memory
            unit: By
          - description: Amount of pods allocatable on the node
            gauge:
              dataPoints:
                - asInt: "110"
                  timeUnixNano: "1000000"
            name: k8s.node.allocatable_pods
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.node.name
          value:
            stringValue: kind-worker2
        - key: k8s.node.uid
          value:
            stringValue: ee436e34-6e0a-4de6-aaa3-9fc59688529e
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The condition of a particular Node.
            gauge:
              dataPoints:
                - asInt: "0"
                  attributes:
                    - key: condition
                      value:
                        stringValue: DiskPressure
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
                - asInt: "0"
                  attributes:
                    - key: condition
                      value:
                        stringValue: MemoryPressure
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
                - asInt: "0"
                  attributes:
                    - key: condition
                      value:
                        stringValue: PIDPressure
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
                - asInt: "1"
                  attributes:
                    - key: condition
                      value:
                        stringValue: Ready
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.node.condition
            unit: '{condition}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.node.name
          value:
            stringValue: kind-worker2
        - key: k8s.node.uid
          value:
            stringValue: ee436e34-6e0a-4de6-aaa3-9fc59688529e
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Ready condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "1"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_ready
          - description: MemoryPressure condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "0"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_memory_pressure
          - description: PIDPressure condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "0"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_pid_pressure
          - description: DiskPressure condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "0"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_disk_pressure
          - description: NetworkUnavailable condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "-1"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_network_unavailable
          - description: Amount of cpu allocatable on the node
            gauge:
              dataPoints:
                - asDouble: 6
                  timeUnixNano: "1000000"
            name: k8s.node.allocatable_cpu
            unit: '{cpu}'
          - description: Amount of memory allocatable on the node
            gauge:
              dataPoints:
                - asInt: "12508241920"
                  timeUnixNano: "1000000"
            name: k8s.node.allocatable_memory
            unit: By
          - description: Amount of pods allocatable on the node
            gauge:
              dataPoints:
                - asInt: "110"
                  timeUnixNano: "1000000"
            name: k8s.node.allocatable_pods
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.daemonset.uid
          value:
            stringValue: 907ecd3e-a108-49a4-8545-f28355cdee2a
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.workload.kind
          value:
            stringValue: daemonset
        - key: k8s.workload.name
          value:
            stringValue: kube-proxy
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod
            gauge:
              dataPoints:
                - asInt: "3"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.current_scheduled_nodes
            unit: '{node}'
          - description: Number of nodes that should be running the daemon pod (including nodes currently running the daemon pod)
            gauge:
              dataPoints:
                - asInt: "3"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.desired_scheduled_nodes
            unit: '{node}'
          - description: Number of nodes that are running the daemon pod, but are not supposed to run the daemon pod
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.misscheduled_nodes
            unit: '{node}'
          - description: Number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready
            gauge:
              dataPoints:
                - asInt: "3"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.ready_nodes
            unit: '{node}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.daemonset.uid
          value:
            stringValue: c9643708-b673-4af1-b5dc-a205cfe45e31
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.workload.kind
          value:
            stringValue: daemonset
        - key: k8s.workload.name
          value:
            stringValue: otelcol-sec0xczo85
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.current_scheduled_nodes
            unit: '{node}'
          - description: Number of nodes that should be running the daemon pod (including nodes currently running the daemon pod)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.desired_scheduled_nodes
            unit: '{node}'
          - description: Number of nodes that are running the daemon pod, but are not supposed to run the daemon pod
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.misscheduled_nodes
            unit: '{node}'
          - description: Number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.ready_nodes
            unit: '{node}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.daemonset.uid
          value:
            stringValue: dcc4a1fd-1c2e-4889-8b04-2fe15fdc4747
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.workload.kind
          value:
            stringValue: daemonset
        - key: k8s.workload.name
          value:
            stringValue: kindnet
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod
            gauge:
              dataPoints:
                - asInt: "3"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.current_scheduled_nodes
            unit: '{node}'
          - description: Number of nodes that should be running the daemon pod (including nodes currently running the daemon pod)
            gauge:
              dataPoints:
                - asInt: "3"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.desired_scheduled_nodes
            unit: '{node}'
          - description: Number of nodes that are running the daemon pod, but are not supposed to run the daemon pod
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.misscheduled_nodes
            unit: '{node}'
          - description: Number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready
            gauge:
              dataPoints:
                - asInt: "3"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.ready_nodes
            unit: '{node}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.deployment.uid
          value:
            stringValue: 267ef9f2-4f9d-4a61-8159-58d137e9e308
        - key: k8s.namespace.name
          value:
            stringValue: local-path-storage
        - key: k8s.workload.kind
          value:
            stringValue: deployment
        - key: k8s.workload.name
          value:
            stringValue: local-path-provisioner
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Total number of available pods (ready for at least minReadySeconds) targeted by this deployment
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.deployment.available
            unit: '{pod}'
          - description: Number of desired pods in this deployment
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.deployment.desired
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.deployment.uid
          value:
            stringValue: 2d3a28d6-6d54-4c40-afa4-00dec49ca8ce
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.workload.kind
          value:
            stringValue: deployment
        - key: k8s.workload.name
          value:
            stringValue: coredns
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Total number of available pods (ready for at least minReadySeconds) targeted by this deployment
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.deployment.available
            unit: '{pod}'
          - description: Number of desired pods in this deployment
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.deployment.desired
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.deployment.uid
          value:
            stringValue: f1193382-def3-4f0a-9f5e-d75ea17d79d7
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.workload.kind
          value:
            stringValue: deployment
        - key: k8s.workload.name
          value:
            stringValue: otelcol-9tkx95pdtp
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Total number of available pods (ready for at least minReadySeconds) targeted by this deployment
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.deployment.available
            unit: '{pod}'
          - description: Number of desired pods in this deployment
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.deployment.desired
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.node.name
          value:
            stringValue: kind-worker2
        - key: k8s.pod.name
          value:
            stringValue: otelcol-sec0xczo85-jn4rf
        - key: k8s.pod.uid
          value:
            stringValue: fae99f64-35b9-4267-afdd-739719ab6f5d
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.replicaset.uid
          value:
            stringValue: 27fd564f-1f3f-437f-b1c3-e6e5c0d51df5
        - key: k8s.workload.kind
          value:
            stringValue: replicaset
        - key: k8s.workload.name
          value:
            stringValue: otelcol-9tkx95pdtp-67dbdfdc4f
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Total number of available pods (ready for at least minReadySeconds) targeted by this replicaset
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.replicaset.available
            unit: '{pod}'
          - description: Number of desired pods in this replicaset
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.replicaset.desired
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: coredns-6f6b679f8f-nfpqm
        - key: k8s.pod.uid
          value:
            stringValue: 11b38b6d-952a-48e1-8993-b73b2171e77d
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: coredns-6f6b679f8f-pk8bp
        - key: k8s.pod.uid
          value:
            stringValue: 4ea88508-6c1e-4a8e-b76a-efc77d8f7cd4
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: etcd-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: 9590bd07-47a8-49b1-8ce6-998c20d59006
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kindnet-ljhc4
        - key: k8s.pod.uid
          value:
            stringValue: add9f37a-caf9-49d2-90c7-56344eeb3251
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-apiserver-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: bcfb9366-73cd-4332-8f9b-3a21355ddbf8
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-controller-manager-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: e6827534-33e7-40f8-948a-75c145aa4208
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-proxy-wvkdq
        - key: k8s.pod.uid
          value:
            stringValue: 312a8b99-cece-4712-b6ed-42e45ad957cf
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-scheduler-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: 55370323-efa8-4783-a7a9-e93715512298
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-worker2
        - key: k8s.pod.name
          value:
            stringValue: kindnet-l2hr4
        - key: k8s.pod.uid
          value:
            stringValue: 01b5e514-21b5-4a33-8b23-6823749ad282
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-worker2
        - key: k8s.pod.name
          value:
            stringValue: kube-proxy-966jn
        - key: k8s.pod.uid
          value:
            stringValue: 0d4ad449-0d7a-42d6-92d9-81c3dc7f6cec
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.replicaset.uid
          value:
            stringValue: a0b22365-a816-48be-96b7-6617f4998488
        - key: k8s.workload.kind
          value:
            stringValue: replicaset
        - key: k8s.workload.name
          value:
            stringValue: coredns-6f6b679f8f
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Total number of available pods (ready for at least minReadySeconds) targeted by this replicaset
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.replicaset.available
            unit: '{pod}'
          - description: Number of desired pods in this replicaset
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.replicaset.desired
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: local-path-storage
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: local-path-provisioner-57c5987fd4-xxftv
        - key: k8s.pod.uid
          value:
            stringValue: 432edc60-5446-4340-b375-61e71c928da1
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: local-path-storage
        - key: k8s.replicaset.uid
          value:
            stringValue: 655522b1-661b-46f3-8bd3-c8436a8de542
        - key: k8s.workload.kind
          value:
            stringValue: replicaset
        - key: k8s.workload.name
          value:
            stringValue: local-path-provisioner-57c5987fd4
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Total number of available pods (ready for at least minReadySeconds) targeted by this replicaset
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.replicaset.available
            unit: '{pod}'
          - description: Number of desired pods in this replicaset
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.replicaset.desired
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 007ce4d59c5afab724e38bd398a4bbfeee81ef31972f41ed24639ee9a33e408f
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/coredns/coredns
        - key: container.image.tag
          value:
            stringValue: v1.11.1
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: coredns
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: coredns-6f6b679f8f-pk8bp
        - key: k8s.pod.uid
          value:
            stringValue: 4ea88508-6c1e-4a8e-b76a-efc77d8f7cd4
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "178257920"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_limit
            unit: By
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "73400320"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_request
            unit: By
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 0a03b7f3f4ce6f1cf4cf3176b2932d87473e4458747af819d9e664998f63d721
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/kube-proxy-arm64
        - key: container.image.tag
          value:
            stringValue: v1.31.0
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: kube-proxy
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-worker2
        - key: k8s.pod.name
          value:
            stringValue: kube-proxy-966jn
        - key: k8s.pod.uid
          value:
            stringValue: 0d4ad449-0d7a-42d6-92d9-81c3dc7f6cec
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 2ff2bcdb5f9b8033235b08c0f5256c37da74c083595bc7f771a4089fae7462ed
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/etcd
        - key: container.image.tag
          value:
            stringValue: 3.5.15-0
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: etcd
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: etcd-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: 9590bd07-47a8-49b1-8ce6-998c20d59006
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "104857600"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_request
            unit: By
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 49b5fcf21a574c192366eaebd8a261e22e1d8859d0554303898f213d09301459
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/kube-scheduler-arm64
        - key: container.image.tag
          value:
            stringValue: v1.31.0
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: kube-scheduler
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-scheduler-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: 55370323-efa8-4783-a7a9-e93715512298
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 4cb2412fccb9016c04f9fbf7174a94575cafc56fee27281c02945a2222cb83cd
        - key: container.image.name
          value:
            stringValue: localhost/dynatrace-otel-collector
        - key: container.image.tag
          value:
            stringValue: e2e-test
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: opentelemetry-collector
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.node.name
          value:
            stringValue: kind-worker2
        - key: k8s.pod.name
          value:
            stringValue: otelcol-sec0xczo85-jn4rf
        - key: k8s.pod.uid
          value:
            stringValue: fae99f64-35b9-4267-afdd-739719ab6f5d
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_limit
            unit: '{cpu}'
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.5
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "536870912"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_limit
            unit: By
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "536870912"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_request
            unit: By
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 5bda8e12059b7d6991d4b0dee7fbaa24e6d8fd2e30bc60b9f8c7bc81d4050bea
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/coredns/coredns
        - key: container.image.tag
          value:
            stringValue: v1.11.1
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: coredns
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: coredns-6f6b679f8f-nfpqm
        - key: k8s.pod.uid
          value:
            stringValue: 11b38b6d-952a-48e1-8993-b73b2171e77d
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "178257920"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_limit
            unit: By
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "73400320"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_request
            unit: By
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 6bbc120261e182ca7be6f5e5f34caafc836a02918abe8495eb0c9399c1716f8f
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/kube-apiserver-arm64
        - key: container.image.tag
          value:
            stringValue: v1.31.0
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: kube-apiserver
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-apiserver-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: bcfb9366-73cd-4332-8f9b-3a21355ddbf8
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.25
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 8a81c73f8e40501bdcde157eb27cf15dd4971d7cac50d00869df1950bf73f00f
        - key: container.image.name
          value:
            stringValue: docker.io/kindest/kindnetd
        - key: container.image.tag
          value:
            stringValue: v20240813-c6f155d6
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: kindnet-cni
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-worker2
        - key: k8s.pod.name
          value:
            stringValue: kindnet-l2hr4
        - key: k8s.pod.uid
          value:
            stringValue: 01b5e514-21b5-4a33-8b23-6823749ad282
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_limit
            unit: '{cpu}'
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "52428800"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_limit
            unit: By
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "52428800"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_request
            unit: By
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: a7779f76d77cdd165ffc0c64bf3a51a92841b48c07829295aa30e3020dc7770b
        - key: container.image.name
          value:
            stringValue: docker.io/kindest/kindnetd
        - key: container.image.tag
          value:
            stringValue: v20240813-c6f155d6
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: kindnet-cni
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kindnet-ljhc4
        - key: k8s.pod.uid
          value:
            stringValue: add9f37a-caf9-49d2-90c7-56344eeb3251
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_limit
            unit: '{cpu}'
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "52428800"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_limit
            unit: By
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "52428800"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_request
            unit: By
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: bbc951863f68a4265cf77d29cf8f0ab0f22d99e923b2e9f742b9f9de9b7f0f35
        - key: container.image.name
          value:
            stringValue: docker.io/kindest/local-path-provisioner
        - key: container.image.tag
          value:
            stringValue: v20240813-c6f155d6
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: local-path-provisioner
        - key: k8s.namespace.name
          value:
            stringValue: local-path-storage
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: local-path-provisioner-57c5987fd4-xxftv
        - key: k8s.pod.uid
          value:
            stringValue: 432edc60-5446-4340-b375-61e71c928da1
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: bc9812fecc138074236e77bfadd99821ae7c43e94a4174707357848360d6dc19
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/kube-proxy-arm64
        - key: container.image.tag
          value:
            stringValue: v1.31.0
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: kube-proxy
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-proxy-wvkdq
        - key: k8s.pod.uid
          value:
            stringValue: 312a8b99-cece-4712-b6ed-42e45ad957cf
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: ffc9e1e6485b05ae59acb867588e8aa26e7b6dc994952cf31ab12ed893a381a7
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/kube-controller-manager-arm64
        - key: container.image.tag
          value:
            stringValue: v1.31.0
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: kube-controller-manager
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-controller-manager-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: e6827534-33e7-40f8-948a-75c145aa4208
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.2
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.cluster.uid
          value:
            stringValue: 2ae9924e-5b3d-4bef-a6f7-c7b1dc753143
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.node.name
          value:
            stringValue: kind-worker
        - key: k8s.pod.ip
          value:
            stringValue: 10.244.2.2
        - key: k8s.pod.name
          value:
            stringValue: otelcol-9tkx95pdtp-67dbdfdc4f-ckvw8
        - key: k8s.pod.uid
          value:
            stringValue: c1f3db88-1502-41dd-9487-a8ec6b5f278c
        - key: k8s.workload.kind
          value:
            stringValue: deployment
        - key: k8s.workload.name
          value:
            stringValue: otelcol-9tkx95pdtp
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.cluster.uid
          value:
            stringValue: 2ae9924e-5b3d-4bef-a6f7-c7b1dc753143
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.node.name
          value:
            stringValue: kind-worker
        - key: k8s.pod.ip
          value:
            stringValue: 10.244.2.3
        - key: k8s.pod.name
          value:
            stringValue: otelcol-sec0xczo85-nfmfr
        - key: k8s.pod.uid
          value:
            stringValue: 847872ed-cce6-4b2c-82d6-e2d3f4a96051
        - key: k8s.workload.kind
          value:
            stringValue: daemonset
        - key: k8s.workload.name
          value:
            stringValue: otelcol-sec0xczo85
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.cluster.uid
          value:
            stringValue: 2ae9924e-5b3d-4bef-a6f7-c7b1dc753143
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-worker
        - key: k8s.pod.ip
          value:
            stringValue: 10.89.0.27
        - key: k8s.pod.name
          value:
            stringValue: kindnet-jv6zp
        - key: k8s.pod.uid
          value:
            stringValue: 1bc28303-cd3c-4d5d-a3b5-92f0899d34b7
        - key: k8s.workload.kind
          value:
            stringValue: daemonset
        - key: k8s.workload.name
          value:
            stringValue: kindnet
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.cluster.uid
          value:
            stringValue: 2ae9924e-5b3d-4bef-a6f7-c7b1dc753143
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-worker
        - key: k8s.pod.ip
          value:
            stringValue: 10.89.0.27
        - key: k8s.pod.name
          value:
            stringValue: kube-proxy-wt7b8
        - key: k8s.pod.uid
          value:
            stringValue: c397b4ec-0bea-4b89-a822-6abfbe2f5c00
        - key: k8s.workload.kind
          value:
            stringValue: daemonset
        - key: k8s.workload.name
          value:
            stringValue: kube-proxy
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 2be7d80891e1af8f98a02bb45849b2b970890a04ae26b62de5d643b4c492bf95
        - key: container.image.name
          value:
            stringValue: docker.io/kindest/kindnetd
        - key: container.image.tag
          value:
            stringValue: v20240813-c6f155d6
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.cluster.uid
          value:
            stringValue: 2ae9924e-5b3d-4bef-a6f7-c7b1dc753143
        - key: k8s.container.name
          value:
            stringValue: kindnet-cni
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-worker
        - key: k8s.pod.ip
          value:
            stringValue: 10.89.0.27
        - key: k8s.pod.name
          value:
            stringValue: kindnet-jv6zp
        - key: k8s.pod.uid
          value:
            stringValue: 1bc28303-cd3c-4d5d-a3b5-92f0899d34b7
        - key: k8s.workload.kind
          value:
            stringValue: daemonset
        - key: k8s.workload.name
          value:
            stringValue: kindnet
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_limit
            unit: '{cpu}'
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "52428800"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_limit
            unit: By
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "52428800"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_request
            unit: By
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 6ba03b98642417d0c067c5ff4172a0528d9edfbb5b22726c5db5ee222f49ad71
        - key: container.image.name
          value:
            stringValue: localhost/dynatrace-otel-collector
        - key: container.image.tag
          value:
            stringValue: e2e-test
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.cluster.uid
          value:
            stringValue: 2ae9924e-5b3d-4bef-a6f7-c7b1dc753143
        - key: k8s.container.name
          value:
            stringValue: opentelemetry-collector
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.node.name
          value:
            stringValue: kind-worker
        - key: k8s.pod.ip
          value:
            stringValue: 10.244.2.3
        - key: k8s.pod.name
          value:
            stringValue: otelcol-sec0xczo85-nfmfr
        - key: k8s.pod.uid
          value:
            stringValue: 847872ed-cce6-4b2c-82d6-e2d3f4a96051
        - key: k8s.workload.kind
          value:
            stringValue: daemonset
        - key: k8s.workload.name
          value:
            stringValue: otelcol-sec0xczo85
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_limit
            unit: '{cpu}'
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.5
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "536870912"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_limit
            unit: By
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "536870912"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_request
            unit: By
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 6f91de61e7b20d7a108d8c05961597fb1cab74a3530bedcf425f818acfa466ff
        - key: container.image.name
          value:
            stringValue: localhost/dynatrace-otel-collector
        - key: container.image.tag
          value:
            stringValue: e2e-test
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.cluster.uid
          value:
            stringValue: 2ae9924e-5b3d-4bef-a6f7-c7b1dc753143
        - key: k8s.container.name
          value:
            stringValue: opentelemetry-collector
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.node.name
          value:
            stringValue: kind-worker
        - key: k8s.pod.ip
          value:
            stringValue: 10.244.2.2
        - key: k8s.pod.name
          value:
            stringValue: otelcol-9tkx95pdtp-67dbdfdc4f-ckvw8
        - key: k8s.pod.uid
          value:
            stringValue: c1f3db88-1502-41dd-9487-a8ec6b5f278c
        - key: k8s.workload.kind
          value:
            stringValue: deployment
        - key: k8s.workload.name
          value:
            stringValue: otelcol-9tkx95pdtp
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_limit
            unit: '{cpu}'
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.5
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "536870912"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_limit
            unit: By
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "536870912"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_request
            unit: By
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: d3773adbf8e837462e1ce00fd31cd214078b5733190ca01ced48cb9347fccc7c
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/kube-proxy-arm64
        - key: container.image.tag
          value:
            stringValue: v1.31.0
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.cluster.uid
          value:
            stringValue: 2ae9924e-5b3d-4bef-a6f7-c7b1dc753143
        - key: k8s.container.name
          value:
            stringValue: kube-proxy
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-worker
        - key: k8s.pod.ip
          value:
            stringValue: 10.89.0.27
        - key: k8s.pod.name
          value:
            stringValue: kube-proxy-wt7b8
        - key: k8s.pod.uid
          value:
            stringValue: c397b4ec-0bea-4b89-a822-6abfbe2f5c00
        - key: k8s.workload.kind
          value:
            stringValue: daemonset
        - key: k8s.workload.name
          value:
            stringValue: kube-proxy
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
