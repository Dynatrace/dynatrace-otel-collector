resourceMetrics:
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: default
        - key: k8s.namespace.uid
          value:
            stringValue: 38c2a014-496b-43fd-82f2-4a9634bcca94
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The current phase of namespaces (1 for active and 0 for terminating)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.namespace.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.namespace.uid
          value:
            stringValue: ebaf5d2c-569a-4620-b2dd-e039d40c0346
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The current phase of namespaces (1 for active and 0 for terminating)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.namespace.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-node-lease
        - key: k8s.namespace.uid
          value:
            stringValue: 7400993b-9857-4bfe-82af-ed9a64221e04
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The current phase of namespaces (1 for active and 0 for terminating)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.namespace.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-public
        - key: k8s.namespace.uid
          value:
            stringValue: 33218bb9-ebd6-4748-a05e-d36fe336143b
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The current phase of namespaces (1 for active and 0 for terminating)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.namespace.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.namespace.uid
          value:
            stringValue: d67f6814-4d32-467c-9c54-dfbb0f9d376a
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The current phase of namespaces (1 for active and 0 for terminating)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.namespace.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: local-path-storage
        - key: k8s.namespace.uid
          value:
            stringValue: debb013f-a5f2-49d2-89b0-81778ab7a910
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The current phase of namespaces (1 for active and 0 for terminating)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.namespace.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.node.uid
          value:
            stringValue: 89d649a8-f085-438f-8668-e2246ed05c25
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The condition of a particular Node.
            gauge:
              dataPoints:
                - asInt: "0"
                  attributes:
                    - key: condition
                      value:
                        stringValue: DiskPressure
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
                - asInt: "0"
                  attributes:
                    - key: condition
                      value:
                        stringValue: MemoryPressure
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
                - asInt: "0"
                  attributes:
                    - key: condition
                      value:
                        stringValue: PIDPressure
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
                - asInt: "1"
                  attributes:
                    - key: condition
                      value:
                        stringValue: Ready
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.node.condition
            unit: '{condition}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.node.uid
          value:
            stringValue: 89d649a8-f085-438f-8668-e2246ed05c25
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Ready condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "1"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_ready
          - description: MemoryPressure condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "0"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_memory_pressure
          - description: PIDPressure condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "0"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_pid_pressure
          - description: DiskPressure condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "0"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_disk_pressure
          - description: NetworkUnavailable condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "-1"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_network_unavailable
          - description: Amount of cpu allocatable on the node
            gauge:
              dataPoints:
                - asDouble: 6
                  timeUnixNano: "1000000"
            name: k8s.node.allocatable_cpu
            unit: '{cpu}'
          - description: Amount of memory allocatable on the node
            gauge:
              dataPoints:
                - asInt: "12508241920"
                  timeUnixNano: "1000000"
            name: k8s.node.allocatable_memory
            unit: By
          - description: Amount of pods allocatable on the node
            gauge:
              dataPoints:
                - asInt: "110"
                  timeUnixNano: "1000000"
            name: k8s.node.allocatable_pods
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.node.name
          value:
            stringValue: kind-worker
        - key: k8s.node.uid
          value:
            stringValue: 4c3cc073-9eb5-48cc-9af8-39d797f7a8e0
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The condition of a particular Node.
            gauge:
              dataPoints:
                - asInt: "0"
                  attributes:
                    - key: condition
                      value:
                        stringValue: DiskPressure
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
                - asInt: "0"
                  attributes:
                    - key: condition
                      value:
                        stringValue: MemoryPressure
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
                - asInt: "0"
                  attributes:
                    - key: condition
                      value:
                        stringValue: PIDPressure
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
                - asInt: "1"
                  attributes:
                    - key: condition
                      value:
                        stringValue: Ready
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.node.condition
            unit: '{condition}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.node.name
          value:
            stringValue: kind-worker
        - key: k8s.node.uid
          value:
            stringValue: 4c3cc073-9eb5-48cc-9af8-39d797f7a8e0
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Ready condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "1"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_ready
          - description: MemoryPressure condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "0"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_memory_pressure
          - description: PIDPressure condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "0"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_pid_pressure
          - description: DiskPressure condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "0"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_disk_pressure
          - description: NetworkUnavailable condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "-1"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_network_unavailable
          - description: Amount of cpu allocatable on the node
            gauge:
              dataPoints:
                - asDouble: 6
                  timeUnixNano: "1000000"
            name: k8s.node.allocatable_cpu
            unit: '{cpu}'
          - description: Amount of memory allocatable on the node
            gauge:
              dataPoints:
                - asInt: "12508241920"
                  timeUnixNano: "1000000"
            name: k8s.node.allocatable_memory
            unit: By
          - description: Amount of pods allocatable on the node
            gauge:
              dataPoints:
                - asInt: "110"
                  timeUnixNano: "1000000"
            name: k8s.node.allocatable_pods
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.node.name
          value:
            stringValue: kind-worker2
        - key: k8s.node.uid
          value:
            stringValue: ac2fa33c-b0b2-4ccc-9657-21c8ac7f7524
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The condition of a particular Node.
            gauge:
              dataPoints:
                - asInt: "0"
                  attributes:
                    - key: condition
                      value:
                        stringValue: DiskPressure
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
                - asInt: "0"
                  attributes:
                    - key: condition
                      value:
                        stringValue: MemoryPressure
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
                - asInt: "0"
                  attributes:
                    - key: condition
                      value:
                        stringValue: PIDPressure
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
                - asInt: "1"
                  attributes:
                    - key: condition
                      value:
                        stringValue: Ready
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.node.condition
            unit: '{condition}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.node.name
          value:
            stringValue: kind-worker2
        - key: k8s.node.uid
          value:
            stringValue: ac2fa33c-b0b2-4ccc-9657-21c8ac7f7524
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Ready condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "1"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_ready
          - description: MemoryPressure condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "0"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_memory_pressure
          - description: PIDPressure condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "0"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_pid_pressure
          - description: DiskPressure condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "0"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_disk_pressure
          - description: NetworkUnavailable condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "-1"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_network_unavailable
          - description: Amount of cpu allocatable on the node
            gauge:
              dataPoints:
                - asDouble: 6
                  timeUnixNano: "1000000"
            name: k8s.node.allocatable_cpu
            unit: '{cpu}'
          - description: Amount of memory allocatable on the node
            gauge:
              dataPoints:
                - asInt: "12508241920"
                  timeUnixNano: "1000000"
            name: k8s.node.allocatable_memory
            unit: By
          - description: Amount of pods allocatable on the node
            gauge:
              dataPoints:
                - asInt: "110"
                  timeUnixNano: "1000000"
            name: k8s.node.allocatable_pods
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.daemonset.uid
          value:
            stringValue: 428ec5a4-c121-4226-9358-4d7b1589d72f
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.workload.kind
          value:
            stringValue: daemonset
        - key: k8s.workload.name
          value:
            stringValue: kube-proxy
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod
            gauge:
              dataPoints:
                - asInt: "3"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.current_scheduled_nodes
            unit: '{node}'
          - description: Number of nodes that should be running the daemon pod (including nodes currently running the daemon pod)
            gauge:
              dataPoints:
                - asInt: "3"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.desired_scheduled_nodes
            unit: '{node}'
          - description: Number of nodes that are running the daemon pod, but are not supposed to run the daemon pod
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.misscheduled_nodes
            unit: '{node}'
          - description: Number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready
            gauge:
              dataPoints:
                - asInt: "3"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.ready_nodes
            unit: '{node}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.daemonset.uid
          value:
            stringValue: 7870e114-e27f-49d9-b903-6ea6d80d30ed
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.workload.kind
          value:
            stringValue: daemonset
        - key: k8s.workload.name
          value:
            stringValue: kindnet
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod
            gauge:
              dataPoints:
                - asInt: "3"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.current_scheduled_nodes
            unit: '{node}'
          - description: Number of nodes that should be running the daemon pod (including nodes currently running the daemon pod)
            gauge:
              dataPoints:
                - asInt: "3"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.desired_scheduled_nodes
            unit: '{node}'
          - description: Number of nodes that are running the daemon pod, but are not supposed to run the daemon pod
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.misscheduled_nodes
            unit: '{node}'
          - description: Number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready
            gauge:
              dataPoints:
                - asInt: "3"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.ready_nodes
            unit: '{node}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.daemonset.uid
          value:
            stringValue: b3d2f313-e684-474d-bd89-8838ac004417
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.workload.kind
          value:
            stringValue: daemonset
        - key: k8s.workload.name
          value:
            stringValue: otelcol-eo699wky0o
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.current_scheduled_nodes
            unit: '{node}'
          - description: Number of nodes that should be running the daemon pod (including nodes currently running the daemon pod)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.desired_scheduled_nodes
            unit: '{node}'
          - description: Number of nodes that are running the daemon pod, but are not supposed to run the daemon pod
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.misscheduled_nodes
            unit: '{node}'
          - description: Number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.ready_nodes
            unit: '{node}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.deployment.uid
          value:
            stringValue: 546f0a85-2adc-4f8c-b87b-6f449c20a748
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.workload.kind
          value:
            stringValue: deployment
        - key: k8s.workload.name
          value:
            stringValue: coredns
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Total number of available pods (ready for at least minReadySeconds) targeted by this deployment
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.deployment.available
            unit: '{pod}'
          - description: Number of desired pods in this deployment
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.deployment.desired
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.deployment.uid
          value:
            stringValue: 90f3c923-73d5-443a-9603-6e9a2db5fc62
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.workload.kind
          value:
            stringValue: deployment
        - key: k8s.workload.name
          value:
            stringValue: busybox-deployment
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Total number of available pods (ready for at least minReadySeconds) targeted by this deployment
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.deployment.available
            unit: '{pod}'
          - description: Number of desired pods in this deployment
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.deployment.desired
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.deployment.uid
          value:
            stringValue: b56a5121-2d25-4803-9acf-55961ed472fa
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.workload.kind
          value:
            stringValue: deployment
        - key: k8s.workload.name
          value:
            stringValue: otelcol-eo699wky0o
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Total number of available pods (ready for at least minReadySeconds) targeted by this deployment
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.deployment.available
            unit: '{pod}'
          - description: Number of desired pods in this deployment
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.deployment.desired
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.deployment.uid
          value:
            stringValue: dedecfd0-f390-4da3-a280-9c1b56781116
        - key: k8s.namespace.name
          value:
            stringValue: local-path-storage
        - key: k8s.workload.kind
          value:
            stringValue: deployment
        - key: k8s.workload.name
          value:
            stringValue: local-path-provisioner
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Total number of available pods (ready for at least minReadySeconds) targeted by this deployment
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.deployment.available
            unit: '{pod}'
          - description: Number of desired pods in this deployment
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.deployment.desired
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.node.name
          value:
            stringValue: kind-worker2
        - key: k8s.pod.name
          value:
            stringValue: otelcol-eo699wky0o-hzg4x
        - key: k8s.pod.uid
          value:
            stringValue: e53abad0-1534-494f-97c7-4622f7866c45
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.replicaset.uid
          value:
            stringValue: b369a2bd-3943-45f5-af07-cd3c0bac17bd
        - key: k8s.workload.kind
          value:
            stringValue: replicaset
        - key: k8s.workload.name
          value:
            stringValue: busybox-deployment-cf788ffd
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Total number of available pods (ready for at least minReadySeconds) targeted by this replicaset
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.replicaset.available
            unit: '{pod}'
          - description: Number of desired pods in this replicaset
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.replicaset.desired
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.replicaset.uid
          value:
            stringValue: b7069813-0299-4b5a-a86d-9698a9e82120
        - key: k8s.workload.kind
          value:
            stringValue: replicaset
        - key: k8s.workload.name
          value:
            stringValue: otelcol-eo699wky0o-5cfd8bf889
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Total number of available pods (ready for at least minReadySeconds) targeted by this replicaset
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.replicaset.available
            unit: '{pod}'
          - description: Number of desired pods in this replicaset
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.replicaset.desired
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: coredns-6f6b679f8f-6gkmm
        - key: k8s.pod.uid
          value:
            stringValue: 86a7990e-8000-49ad-95d4-24913e6dd2e9
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: coredns-6f6b679f8f-trxgf
        - key: k8s.pod.uid
          value:
            stringValue: bb9b5485-716d-4db9-8fd2-00f4451d29a6
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: etcd-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: dcc81ff4-72c7-4892-90a5-5c4b9cd2ee1c
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kindnet-6fhkn
        - key: k8s.pod.uid
          value:
            stringValue: 40b7f377-b748-4d2e-887e-86c77a38f0f3
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-apiserver-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: a756bb32-4942-483d-a2c2-f5169ba107dc
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-controller-manager-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: 4c133052-7bae-46b1-9e46-38820248f8a7
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-proxy-qbw8q
        - key: k8s.pod.uid
          value:
            stringValue: b1dd08fd-1eed-498f-8f25-eea09c893f91
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-scheduler-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: 5f603356-d27b-46b9-a561-4ed1baa49a56
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-worker2
        - key: k8s.pod.name
          value:
            stringValue: kindnet-9dkwk
        - key: k8s.pod.uid
          value:
            stringValue: d0c17c0e-4e13-4d2b-a5a9-29391865baf0
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-worker2
        - key: k8s.pod.name
          value:
            stringValue: kube-proxy-nls7n
        - key: k8s.pod.uid
          value:
            stringValue: 1f70e374-9d7a-491e-b00e-ea2834d4bc74
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.replicaset.uid
          value:
            stringValue: 5e93b07e-454b-43c7-a7ed-c8b4e7ba8812
        - key: k8s.workload.kind
          value:
            stringValue: replicaset
        - key: k8s.workload.name
          value:
            stringValue: coredns-6f6b679f8f
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Total number of available pods (ready for at least minReadySeconds) targeted by this replicaset
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.replicaset.available
            unit: '{pod}'
          - description: Number of desired pods in this replicaset
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.replicaset.desired
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: local-path-storage
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: local-path-provisioner-57c5987fd4-vndcg
        - key: k8s.pod.uid
          value:
            stringValue: 01fb1012-e387-4d2d-84b9-6b6a37491363
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.namespace.name
          value:
            stringValue: local-path-storage
        - key: k8s.replicaset.uid
          value:
            stringValue: 92d86718-ea55-40a0-8170-0f9b31a823a4
        - key: k8s.workload.kind
          value:
            stringValue: replicaset
        - key: k8s.workload.name
          value:
            stringValue: local-path-provisioner-57c5987fd4
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Total number of available pods (ready for at least minReadySeconds) targeted by this replicaset
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.replicaset.available
            unit: '{pod}'
          - description: Number of desired pods in this replicaset
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.replicaset.desired
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 218c8587fefcc2b8096bbd464d3aadc2e6ffa799ac9577bb040a980aada6b7e1
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/kube-controller-manager-arm64
        - key: container.image.tag
          value:
            stringValue: v1.31.0
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: kube-controller-manager
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-controller-manager-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: 4c133052-7bae-46b1-9e46-38820248f8a7
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.2
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 228ab07032ccfa04cf806d2f914f267883227c1cb7713a2dedb29bd21fb60ba6
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/coredns/coredns
        - key: container.image.tag
          value:
            stringValue: v1.11.1
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: coredns
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: coredns-6f6b679f8f-trxgf
        - key: k8s.pod.uid
          value:
            stringValue: bb9b5485-716d-4db9-8fd2-00f4451d29a6
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "178257920"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_limit
            unit: By
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "73400320"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_request
            unit: By
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 45fa0d0e2eaa4c2f066002f41c023ba8659fc1bc01c1f3445e132783cee5a3fc
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/kube-scheduler-arm64
        - key: container.image.tag
          value:
            stringValue: v1.31.0
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: kube-scheduler
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-scheduler-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: 5f603356-d27b-46b9-a561-4ed1baa49a56
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 793a19d5d7e3d914e9ca57283aa21b9ffc88030815bcfc39eb162774a417c664
        - key: container.image.name
          value:
            stringValue: docker.io/kindest/local-path-provisioner
        - key: container.image.tag
          value:
            stringValue: v20240813-c6f155d6
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: local-path-provisioner
        - key: k8s.namespace.name
          value:
            stringValue: local-path-storage
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: local-path-provisioner-57c5987fd4-vndcg
        - key: k8s.pod.uid
          value:
            stringValue: 01fb1012-e387-4d2d-84b9-6b6a37491363
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 81a60e7faf2e1c9705562d791439caa2066b5b28bbdd33c5831795d5a48f3ac5
        - key: container.image.name
          value:
            stringValue: docker.io/kindest/kindnetd
        - key: container.image.tag
          value:
            stringValue: v20240813-c6f155d6
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: kindnet-cni
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kindnet-6fhkn
        - key: k8s.pod.uid
          value:
            stringValue: 40b7f377-b748-4d2e-887e-86c77a38f0f3
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_limit
            unit: '{cpu}'
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "52428800"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_limit
            unit: By
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "52428800"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_request
            unit: By
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 9bc14a1ae058f7ecc086384ca523d7f6e7438bde71c9cc9751c21e90a16773f1
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/etcd
        - key: container.image.tag
          value:
            stringValue: 3.5.15-0
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: etcd
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: etcd-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: dcc81ff4-72c7-4892-90a5-5c4b9cd2ee1c
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "104857600"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_request
            unit: By
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 9c0bdd106290ba2773ba925202de2bbeef2227959dbbe03828bc37e30caec99c
        - key: container.image.name
          value:
            stringValue: localhost/dynatrace-otel-collector
        - key: container.image.tag
          value:
            stringValue: e2e-test
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: opentelemetry-collector
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.node.name
          value:
            stringValue: kind-worker2
        - key: k8s.pod.name
          value:
            stringValue: otelcol-eo699wky0o-hzg4x
        - key: k8s.pod.uid
          value:
            stringValue: e53abad0-1534-494f-97c7-4622f7866c45
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_limit
            unit: '{cpu}'
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.5
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "536870912"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_limit
            unit: By
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "536870912"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_request
            unit: By
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: b07d42d3f6268789b2c8793f155414d9cac633fd726fa377ec291aa99e5fd032
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/kube-apiserver-arm64
        - key: container.image.tag
          value:
            stringValue: v1.31.0
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: kube-apiserver
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-apiserver-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: a756bb32-4942-483d-a2c2-f5169ba107dc
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.25
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: cec967dc86470287c8060aec9257ca496053323571a66541d28fedd62df06bbe
        - key: container.image.name
          value:
            stringValue: docker.io/kindest/kindnetd
        - key: container.image.tag
          value:
            stringValue: v20240813-c6f155d6
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: kindnet-cni
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-worker2
        - key: k8s.pod.name
          value:
            stringValue: kindnet-9dkwk
        - key: k8s.pod.uid
          value:
            stringValue: d0c17c0e-4e13-4d2b-a5a9-29391865baf0
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_limit
            unit: '{cpu}'
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "52428800"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_limit
            unit: By
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "52428800"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_request
            unit: By
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: ea20d026a849e2bea6d41dbe8e323381a4a0202c91a2f529acde5e074cb043fa
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/kube-proxy-arm64
        - key: container.image.tag
          value:
            stringValue: v1.31.0
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: kube-proxy
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-worker2
        - key: k8s.pod.name
          value:
            stringValue: kube-proxy-nls7n
        - key: k8s.pod.uid
          value:
            stringValue: 1f70e374-9d7a-491e-b00e-ea2834d4bc74
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: f311ffd8aed944b93d408819ee640d8cf4bc6ea856a20c3b466a29f4f8fe5fc3
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/coredns/coredns
        - key: container.image.tag
          value:
            stringValue: v1.11.1
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: coredns
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: coredns-6f6b679f8f-6gkmm
        - key: k8s.pod.uid
          value:
            stringValue: 86a7990e-8000-49ad-95d4-24913e6dd2e9
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "178257920"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_limit
            unit: By
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "73400320"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_request
            unit: By
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: ffce5ffc50f12af9a95da17748416eca696c9888300d70970e92476854b13404
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/kube-proxy-arm64
        - key: container.image.tag
          value:
            stringValue: v1.31.0
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.container.name
          value:
            stringValue: kube-proxy
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-proxy-qbw8q
        - key: k8s.pod.uid
          value:
            stringValue: b1dd08fd-1eed-498f-8f25-eea09c893f91
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.cluster.uid
          value:
            stringValue: d67f6814-4d32-467c-9c54-dfbb0f9d376a
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.node.name
          value:
            stringValue: kind-worker
        - key: k8s.pod.ip
          value:
            stringValue: 10.244.2.37
        - key: k8s.pod.name
          value:
            stringValue: otelcol-eo699wky0o-7422r
        - key: k8s.pod.uid
          value:
            stringValue: 927aea58-c041-49a3-9643-6ebbde3c932d
        - key: k8s.workload.kind
          value:
            stringValue: daemonset
        - key: k8s.workload.name
          value:
            stringValue: otelcol-eo699wky0o
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.cluster.uid
          value:
            stringValue: d67f6814-4d32-467c-9c54-dfbb0f9d376a
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.node.name
          value:
            stringValue: kind-worker
        - key: k8s.pod.ip
          value:
            stringValue: 10.244.2.38
        - key: k8s.pod.name
          value:
            stringValue: otelcol-eo699wky0o-5cfd8bf889-c7cc7
        - key: k8s.pod.uid
          value:
            stringValue: b4eb03fd-74e8-4699-abba-a9715f6451c7
        - key: k8s.workload.kind
          value:
            stringValue: deployment
        - key: k8s.workload.name
          value:
            stringValue: otelcol-eo699wky0o
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.cluster.uid
          value:
            stringValue: d67f6814-4d32-467c-9c54-dfbb0f9d376a
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.node.name
          value:
            stringValue: kind-worker
        - key: k8s.pod.ip
          value:
            stringValue: 10.244.2.39
        - key: k8s.pod.name
          value:
            stringValue: busybox-deployment-cf788ffd-qcxcq
        - key: k8s.pod.uid
          value:
            stringValue: 961fa46b-ed8c-4c38-a6c5-aa4e06de6f90
        - key: k8s.workload.kind
          value:
            stringValue: deployment
        - key: k8s.workload.name
          value:
            stringValue: busybox-deployment
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.cluster.uid
          value:
            stringValue: d67f6814-4d32-467c-9c54-dfbb0f9d376a
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-worker
        - key: k8s.pod.ip
          value:
            stringValue: 10.89.0.35
        - key: k8s.pod.name
          value:
            stringValue: kindnet-g58cr
        - key: k8s.pod.uid
          value:
            stringValue: 3fa6cef4-776e-40f9-98c1-0a93f6be3ff8
        - key: k8s.workload.kind
          value:
            stringValue: daemonset
        - key: k8s.workload.name
          value:
            stringValue: kindnet
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.cluster.uid
          value:
            stringValue: d67f6814-4d32-467c-9c54-dfbb0f9d376a
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-worker
        - key: k8s.pod.ip
          value:
            stringValue: 10.89.0.35
        - key: k8s.pod.name
          value:
            stringValue: kube-proxy-pzpcs
        - key: k8s.pod.uid
          value:
            stringValue: 1efa0e48-dadf-4e5c-9569-9682c1a1c487
        - key: k8s.workload.kind
          value:
            stringValue: daemonset
        - key: k8s.workload.name
          value:
            stringValue: kube-proxy
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
          - description: Current status reason of the pod (1 - Evicted, 2 - NodeAffinity, 3 - NodeLost, 4 - Shutdown, 5 - UnexpectedAdmissionError, 6 - Unknown)
            gauge:
              dataPoints:
                - asInt: "6"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.status_reason
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 146b00049999909a231b1c5013d4603686b0c1ad7896d537cad9398a0c74bafc
        - key: container.image.name
          value:
            stringValue: localhost/dynatrace-otel-collector
        - key: container.image.tag
          value:
            stringValue: e2e-test
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.cluster.uid
          value:
            stringValue: d67f6814-4d32-467c-9c54-dfbb0f9d376a
        - key: k8s.container.name
          value:
            stringValue: opentelemetry-collector
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.node.name
          value:
            stringValue: kind-worker
        - key: k8s.pod.ip
          value:
            stringValue: 10.244.2.38
        - key: k8s.pod.name
          value:
            stringValue: otelcol-eo699wky0o-5cfd8bf889-c7cc7
        - key: k8s.pod.uid
          value:
            stringValue: b4eb03fd-74e8-4699-abba-a9715f6451c7
        - key: k8s.workload.kind
          value:
            stringValue: deployment
        - key: k8s.workload.name
          value:
            stringValue: otelcol-eo699wky0o
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_limit
            unit: '{cpu}'
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.5
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "536870912"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_limit
            unit: By
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "536870912"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_request
            unit: By
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 1d4f70374afef75ec2251bfe73068176af30cd978f89a61c11978f158f1411a9
        - key: container.image.name
          value:
            stringValue: localhost/dynatrace-otel-collector
        - key: container.image.tag
          value:
            stringValue: e2e-test
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.cluster.uid
          value:
            stringValue: d67f6814-4d32-467c-9c54-dfbb0f9d376a
        - key: k8s.container.name
          value:
            stringValue: opentelemetry-collector
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.node.name
          value:
            stringValue: kind-worker
        - key: k8s.pod.ip
          value:
            stringValue: 10.244.2.37
        - key: k8s.pod.name
          value:
            stringValue: otelcol-eo699wky0o-7422r
        - key: k8s.pod.uid
          value:
            stringValue: 927aea58-c041-49a3-9643-6ebbde3c932d
        - key: k8s.workload.kind
          value:
            stringValue: daemonset
        - key: k8s.workload.name
          value:
            stringValue: otelcol-eo699wky0o
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_limit
            unit: '{cpu}'
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.5
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "536870912"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_limit
            unit: By
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "536870912"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_request
            unit: By
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 33695c305e5fc93d827ac42f35cd72950afffc04528425c9044744d0234f21b1
        - key: container.image.name
          value:
            stringValue: docker.io/library/busybox
        - key: container.image.tag
          value:
            stringValue: latest
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.cluster.uid
          value:
            stringValue: d67f6814-4d32-467c-9c54-dfbb0f9d376a
        - key: k8s.container.name
          value:
            stringValue: busybox
        - key: k8s.namespace.name
          value:
            stringValue: e2ek8scombined
        - key: k8s.node.name
          value:
            stringValue: kind-worker
        - key: k8s.pod.ip
          value:
            stringValue: 10.244.2.39
        - key: k8s.pod.name
          value:
            stringValue: busybox-deployment-cf788ffd-qcxcq
        - key: k8s.pod.uid
          value:
            stringValue: 961fa46b-ed8c-4c38-a6c5-aa4e06de6f90
        - key: k8s.workload.kind
          value:
            stringValue: deployment
        - key: k8s.workload.name
          value:
            stringValue: busybox-deployment
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: a1b2dc90b6f70328cb083db45f01641d08dc8031443e7ee4be792cd9cd390809
        - key: container.image.name
          value:
            stringValue: docker.io/kindest/kindnetd
        - key: container.image.tag
          value:
            stringValue: v20240813-c6f155d6
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.cluster.uid
          value:
            stringValue: d67f6814-4d32-467c-9c54-dfbb0f9d376a
        - key: k8s.container.name
          value:
            stringValue: kindnet-cni
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-worker
        - key: k8s.pod.ip
          value:
            stringValue: 10.89.0.35
        - key: k8s.pod.name
          value:
            stringValue: kindnet-g58cr
        - key: k8s.pod.uid
          value:
            stringValue: 3fa6cef4-776e-40f9-98c1-0a93f6be3ff8
        - key: k8s.workload.kind
          value:
            stringValue: daemonset
        - key: k8s.workload.name
          value:
            stringValue: kindnet
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_limit
            unit: '{cpu}'
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "52428800"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_limit
            unit: By
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "52428800"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_request
            unit: By
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: dbb1636967ddee5a3eed55ac93d3dda04599f212e49772d0603698d300f4312e
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/kube-proxy-arm64
        - key: container.image.tag
          value:
            stringValue: v1.31.0
        - key: k8s.cluster.name
          value:
            stringValue: k8s-testing-cluster
        - key: k8s.cluster.uid
          value:
            stringValue: d67f6814-4d32-467c-9c54-dfbb0f9d376a
        - key: k8s.container.name
          value:
            stringValue: kube-proxy
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-worker
        - key: k8s.pod.ip
          value:
            stringValue: 10.89.0.35
        - key: k8s.pod.name
          value:
            stringValue: kube-proxy-pzpcs
        - key: k8s.pod.uid
          value:
            stringValue: 1efa0e48-dadf-4e5c-9569-9682c1a1c487
        - key: k8s.workload.kind
          value:
            stringValue: daemonset
        - key: k8s.workload.name
          value:
            stringValue: kube-proxy
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: 0.30.1
